using Core;
using Infrastructure.Sql;
using Microsoft.AspNetCore.Mvc.Testing;
using Tests.Common.FakeServices;

namespace Tests.Integration;

[SetUpFixture]
public class TestSetup
{
    private const DbEngine Engine = DbEngine.Sqlite;
    private static IDb? _db;

    private const string SqliteConnectionString = "DataSource=IntegrationTests;Mode=Memory;Cache=Shared";
    
    private static WebApplicationFactoryInTest? _webApplicationFactory;

    public static FakeEmailSender? EmailSender;
    
    public static IDb Db
    {
        get
        {
            if (_db is null)
                throw new PokerBunchException("Db was not initialized.");

            return _db;
        }
    }

    [OneTimeSetUp]
    public async Task SetUp()
    {
        _db = await InitDbEngine();
        EmailSender = new FakeEmailSender();
        _webApplicationFactory = new WebApplicationFactoryInTest(EmailSender, Db);
        await CreateTables();
        await AddMasterData();
    }

    private Task<IDb> InitDbEngine()
    {
        return Task.FromResult(InitSqliteEngine());
    }

    private IDb InitSqliteEngine() => new SqliteDb(SqliteConnectionString);

    private Task DestroyDbEngine()
    {
        _webApplicationFactory?.Dispose();
        Db.Dispose();
        return Task.CompletedTask;
    }

    public static HttpClient GetClient(string? token = null, bool followRedirect = true)
    {
        if (_webApplicationFactory == null)
            throw new PokerBunchException("WebApplicationFactory was not initialized.");

        var options = new WebApplicationFactoryClientOptions
        {
            AllowAutoRedirect = !followRedirect
        };
        
        var client = _webApplicationFactory.CreateClient(options);

        if(token != null)
            client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
        return client;
    }

    private static async Task CreateTables() => await Db.ExecuteSql(CreateScript);
    private static async Task AddMasterData() => await Db.ExecuteSql(MasterDataSql);

    [OneTimeTearDown]
    public async Task TearDown() => await DestroyDbEngine();

    private static string MasterDataSql => ReadSqlFile("data/db-add-master-data.sql");

    private static string CreateScript
    {
        get
        {
            var createScript = ReadSqlFile("data/db-create-tables.sql");

            if (Engine == DbEngine.Sqlite)
            {
                createScript = createScript.Replace(" INT ", " INTEGER ");
                createScript = createScript.Replace(" GENERATED BY DEFAULT AS IDENTITY ", " ");
            }

            return createScript;
        }
    }

    private static string ReadSqlFile(string fileName)
    {
        var path = Path.Combine(
            AppDomain.CurrentDomain.BaseDirectory,
            "..",
            "..",
            "..",
            "..",
            fileName);
        return File.ReadAllText(path);
    }
}